{"device":"DESKTOP","widgets":{"End#4":{"t":"End","lX":1275,"lY":250,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/ACTIVATED","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"ACTIVATED","all instances":"true","[object Attr]":"ACTIVATED"},"ev":{}},"End#5":{"t":"End","lX":1265,"lY":410,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/PULSE","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"PULSE","all instances":"true","[object Attr]":"PULSE"},"ev":{}},"End#6":{"t":"End","lX":1264,"lY":544,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/LAT","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"LAT","all instances":"true","[object Attr]":"LAT"},"ev":{}},"End#7":{"t":"End","lX":1264,"lY":648,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/LNG","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"LNG","all instances":"true","[object Attr]":"LNG"},"ev":{}},"End#8":{"t":"End","lX":1280,"lY":888,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/TEMP","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"TEMP","all instances":"true","[object Attr]":"TEMP"},"ev":{}},"End#9":{"t":"End","lX":1280,"lY":776,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/BATTERY","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"BATTERY","all instances":"true","[object Attr]":"BATTERY"},"ev":{}},"End#10":{"t":"End","lX":1276,"lY":1004,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/SIGNAL","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"SIGNAL","all instances":"true","[object Attr]":"SIGNAL"},"ev":{}},"All":{"t":"Scripting","lX":245,"lY":580,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel #1":"","channel #2":"","code editor":"// Javascript flow scripting.\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n// Declare global variables here to be initialised at server startup\n\n/**\n * Initialise script state (run once at startup). Pass in channels set in script node widget\n * ch0 - current state of channel0 (Object. Members {channel}, {date}, {value})\n * ch1 - current state of channel1 (Object. Members {channel}, {date}, {value})\n */\nScript.on(\"load\", function(ch0, ch1) {\n    try {\n    } catch (err) {\n        Script.System(\"log\", \"An error occurred in user script load function - \" + err);\t// Or add own error management\n    }\n});\n\n/**\n * Response to incoming flow message. eventData object passed in with:\n * eventData.input - current state of input link (string)\n * eventData.ch0 - current state of channel0. (Object. Members {channel}, {date}, {value})\n * eventData.ch1 - current state of channel1. (Object. Members {channel}, {date}, {value})\n * eventData.inputCh - current state of channel being processed and the channel details (Object. Members {channel}, {value})\n * eventData.matchingCh all channels that have any match to part of the processed channel (Object. Members {channel}, {value})\n * @return {string} return a value to continue the flow or to cancel flow return null\n */\nvar reverseKey = \"AIzaSyDJnu5eo1S9Fbqygj6FcFc8HkPEKcIrw4E\";\n\nScript.on(\"flow\", function(eventData) {\n    var packet = JSON.parse(eventData.input);\n    var serNo = packet.SerNo;\n    var records = packet.Records; // Returns an array\n    var seen = new Date(0);\n    var latestLat;\n    var latestLng;\n    var latestTemp;\n    var latestSignal;\n    var triggered = System.getChannelValue(\"SENSAHUB/KG/BRISBANE/\" + serNo + \"/ACTIVATED\");\n    //console.log(\"========================> \" + triggered);\n    var triggeredTime = -1;\n    var latestBattery;\n    var updateAddress = false;\n    var debug = 3;\n\n    for (var p of records) {\n        var reason = p.Reason;\n        var date = new Date(p.DateUTC);\n\n        var lat;\n        var lng;\n        var temp;\n        var signal;\n        var battery;\n\n        var fields = p.Fields;\n        for (f of fields) {\n            switch (f.FType) {\n                case 0:\n                    lat = f.Lat;\n                    lng = f.Long;\n                    break;\n                case 6:\n                    var ad = f.AnalogueData;\n                    temp = Math.round(ad[\"3\"] / 100);\n                    \n                    // Calc signal\n                    signal = parseInt(ad[\"4\"]);\n                    \n                    // Calc battery\n                    battery = ad[\"1\"] / 1000;\n\n                    if (battery > 4.8) {\n                        battery = 4;\n                    } else if (battery > 4.65) {\n                        battery = 3;\n                    } else if (battery > 4.5) {\n                        battery = 2;\n                    } else {\n                        battery = 1;\n                    }\n            }\n        }\n\n        // Update last seen time and update location\n        if (date > seen) {\n            seen = date;\n            latestLat = lat;\n            latestLng = lng;\n            latestTemp = temp;\n            latestSignal = signal;\n            latestBattery = battery;\n        }\n\n        // Set activated otherwise\n        if (reason == 46 && triggered == 1) {\n            triggered = 2;\n            triggeredTime = date.getTime();\n            updateAddress = true;\n        } else if (reason == 2) {\n            updateAddress = true;\n        }\n    }\n    \n    var finalObj = {\n        date: seen.getTime(),\n        Lat: latestLat,\n        Lng: latestLng,\n        Temp: latestTemp,\n        Battery: latestBattery,\n        Signal: latestSignal,\n        Triggered: triggered,\n        TriggeredTime: triggeredTime,\n        reason: \"\"\n    };\n     \n    if (updateAddress) {\n    //if (true) {\n        var url=\"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" + finalObj.Lat + \",\" + finalObj.Lng + \"&key=\" + reverseKey;\n        finalObj.reason = url;\n    }\n\n    return JSON.stringify(finalObj);\n});"},"ev":{}},"triggered":{"t":"JsonParser","lX":520,"lY":225,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"Triggered"},"ev":{}},"JSON Parser#0":{"t":"JsonParser","lX":525,"lY":370,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"date"},"ev":{}},"JSON Parser#1":{"t":"JsonParser","lX":530,"lY":505,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"Lat"},"ev":{}},"JSON Parser#2":{"t":"JsonParser","lX":530,"lY":610,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"Lng"},"ev":{}},"JSON Parser#3":{"t":"JsonParser","lX":530,"lY":740,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"Battery"},"ev":{}},"JSON Parser#4":{"t":"JsonParser","lX":530,"lY":855,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"Temp"},"ev":{}},"JSON Parser#5":{"t":"JsonParser","lX":532,"lY":968,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"50%","height":"50%","x":"0","y":"0"},"ver":"190104c190915","dis":false,"a":{"field name":"Signal"},"ev":{}},"email":{"t":"Scripting","lX":1165,"lY":1490,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel #1":"","channel #2":"","code editor":"// Javascript flow scripting.\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n// Declare global variables here to be initialised at server startup\n\n/**\n * Initialise script state (run once at startup). Pass in channels set in script node widget\n * ch0 - current state of channel0 (Object. Members {channel}, {date}, {value})\n * ch1 - current state of channel1 (Object. Members {channel}, {date}, {value})\n */\nScript.on(\"load\", function(ch0, ch1) {\n    try {\n    } catch (err) {\n        System.writeLog(\"An error occurred in user script load function - \" + err);\t// Or add own error management\n    }\n});\n\n/**\n * Response to incoming flow message. eventData object passed in with:\n * eventData.input - current state of input link (string)\n * eventData.ch0 - current state of channel0. (Object. Members {channel}, {date}, {value})\n * eventData.ch1 - current state of channel1. (Object. Members {channel}, {date}, {value})\n * eventData.inputCh - current state of channel being processed and the channel details (Object. Members {channel}, {value})\n * eventData.matchingCh all channels that have any match to part of the processed channel (Object. Members {channel}, {value})\n * @return {string} return a value to continue the flow or to cancel flow return null\n */\nScript.on(\"flow\", function(eventData) {\n    var deviceNicknames = {\n        \"Trap 256112\": \"TRAP 0025\",\n        \"Trap 252907\": \"TRAP 0010\",\n        \"Trap 255955\": \"TRAP 0022\",\n        \"Trap 254870\": \"TRAP 0018\",\n        \"Trap 256091\": \"TRAP 0019\",\n        \"Trap 255912\": \"TRAP 0024\",\n        \"Trap 254778\": \"TRAP 0014\",\n        \"Trap 183130\": \"TRAP 0015\",\n        \"Trap 256015\": \"TRAP 0026\",\n        \"Trap 256105\": \"TRAP 0012\",\n        \"Trap 251565\": \"TRAP 0011\",\n        \"Trap 183139\": \"TRAP 0030\",\n        \"Trap 254892\": \"TRAP 0021\",\n        \"Trap 253048\": \"TRAP 0029\",\n        \"Trap 255920\": \"TRAP 0020\",\n        \"Trap 256604\": \"TRAP 0027\",\n        \"Trap 254907\": \"TRAP 0017\",\n        \"Trap 256920\": \"TRAP 0016\",\n        \"Trap 256589\": \"TRAP 0028\",\n        \"Trap 256050\": \"TRAP 0023\",\n        \"Trap 180720\": \"TEST_UNIT1\",\n        \"Trap 181909\": \"TEST_UNIT2\",\n        \"Trap 183271\": \"TEST_UNIT3\",\n        \"Trap 207336\": \"TEST_UNIT4\",\n        \"Trap 206384\": \"TRAP 0001\"\n    };\n    \n    var trap = JSON.parse(eventData.inputCh).channel.instance;\n    var date = new Date();\n    //var value = System.getChannelValue(\"SENSAHUB/KG/BRISBANE/\" + trap + \"/SETTIME\");\n    //var date = new Date(+value);\n    System.writeLog(\"Trap \" + trap + \" triggered detected.\");\n    //return JSON.stringify({\"recipients\":[\"nick@kinectgroup.com\"],\"subject\":deviceNicknames[\"Trap \" + trap] + \" activated\",\"body\":deviceNicknames[\"Trap \" + trap] + \" has been triggered at \" + date.toDateString() + \" \" + date.toLocaleTimeString()});\n    //if (deviceNicknames[\"Trap \" + trap].toUpperCase().indexOf(\"TEST\") != -1) {\n        return JSON.stringify({\"recipients\":[\"nick@kinectgroup.com\",\"brendan@kinectgroup.com\",\"deandob@sensavation.com\", \"daniel@sensavation.com\"],\"subject\":deviceNicknames[\"Trap \" + trap] + \" triggered\",\"body\":deviceNicknames[\"Trap \" + trap] + \" has been triggered at \" + date.toDateString() + \" \" + date.toLocaleTimeString()});\n    //} else {\n    //    return JSON.stringify({\"recipients\":[\"nick@kinectgroup.com\",\"deandob@sensavation.com\",\"Stathi.travalos@brisbane.qld.gov.au\",\"Peter.arthur@brisbane.qld.gov.au\",\"Dan.franks@brisbane.qld.gov.au\"],\"subject\":deviceNicknames[\"Trap \" + trap] + \" triggered\",\"body\":deviceNicknames[\"Trap \" + trap] + \" has been triggered at \" + date.toDateString() + \" \" + date.toLocaleTimeString()});\n    //}\n});"},"ev":{}},"If#1":{"t":"If","lX":672,"lY":1200,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"50%","height":"50%","x":"0","y":"0"},"ver":"190104c190915","dis":false,"a":{"function":"not equal","value":"","new true":"","new false":""},"ev":{}},"JSON Parser#6":{"t":"JsonParser","lX":532,"lY":1196,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"reason"},"ev":{}},"HTTP Request#0":{"t":"HttpRequest","lX":812,"lY":1200,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"URL":""},"ev":{}},"End#0":{"t":"End","lX":1305,"lY":1155,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/STREET","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"STREET","all instances":"true","[object Attr]":"STREET"},"ev":{}},"End#1":{"t":"End","lX":1304,"lY":1308,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/SUBURB","OR Create New Channel":"","category":"KG","class":"BRISBANE","instance":"+","For Selected / New Channel":"","scope":"SUBURB","all instances":"true","[object Attr]":"SUBURB"},"ev":{}},"Street":{"t":"Scripting","lX":960,"lY":1140,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel #1":"","channel #2":"","code editor":"// Javascript flow scripting.\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n// Declare global variables here to be initialised at server startup\n\n/**\n * Initialise script state (run once at startup). Pass in channels set in script node widget\n * ch0 - current state of channel0 (Object. Members {channel}, {date}, {value})\n * ch1 - current state of channel1 (Object. Members {channel}, {date}, {value})\n */\nScript.on(\"load\", function(ch0, ch1) {\n    try {\n    } catch (err) {\n        System.writeLog(\"An error occurred in user script load function - \" + err);\t// Or add own error management\n    }\n});\n\n/**\n * Response to incoming flow message. eventData object passed in with:\n * eventData.input - current state of input link (string)\n * eventData.ch0 - current state of channel0. (Object. Members {channel}, {date}, {value})\n * eventData.ch1 - current state of channel1. (Object. Members {channel}, {date}, {value})\n * eventData.inputCh - current state of channel being processed and the channel details (Object. Members {channel}, {value})\n * eventData.matchingCh all channels that have any match to part of the processed channel (Object. Members {channel}, {value})\n * @return {string} return a value to continue the flow or to cancel flow return null\n */\nScript.on(\"flow\", function(eventData) {\n    var result;\n    try {\n        result = JSON.parse(eventData.input);\n        if (result.results[0].formatted_address) {\n            result = result.results[0].formatted_address.split(\",\")[0].trim();\n        } else {\n            result = \"\";\n        }\n    } catch (err) {\n        System.writeLog(\"An error occurred in user script flow function - \" + err);\t// Or add own error management\n    }\n    return result;\n});"},"ev":{}},"Suburb":{"t":"Scripting","lX":960,"lY":1280,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel #1":"","channel #2":"","code editor":"// Javascript flow scripting.\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n// Declare global variables here to be initialised at server startup\n\n/**\n * Initialise script state (run once at startup). Pass in channels set in script node widget\n * ch0 - current state of channel0 (Object. Members {channel}, {date}, {value})\n * ch1 - current state of channel1 (Object. Members {channel}, {date}, {value})\n */\nScript.on(\"load\", function(ch0, ch1) {\n    try {\n    } catch (err) {\n        System.writeLog(\"An error occurred in user script load function - \" + err);\t// Or add own error management\n    }\n});\n\n/**\n * Response to incoming flow message. eventData object passed in with:\n * eventData.input - current state of input link (string)\n * eventData.ch0 - current state of channel0. (Object. Members {channel}, {date}, {value})\n * eventData.ch1 - current state of channel1. (Object. Members {channel}, {date}, {value})\n * eventData.inputChannel - current state of channel being processed and the channel details (Object. Members {channel}, {value})\n * eventData.matchingChannels all channels that have any match to part of the processed channel (Object. Members {channel}, {value})\n * @return {string} return a value to continue the flow or to cancel flow return null\n */\nScript.on(\"flow\", function(eventData) {\n    var result;\n    try {\n        result = JSON.parse(eventData.input);\n        if (result.results[0].formatted_address) {\n            result = result.results[0].formatted_address.split(\",\")[1].trim();\n        } else {\n            result = \"\";\n        }\n    } catch (err) {\n        System.writeLog(\"An error occurred in user script flow function - \" + err);\t// Or add own error management\n    }\n    return result;\n});"},"ev":{}},"If#2":{"t":"If","lX":1096,"lY":1136,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"50%","height":"50%","x":"0","y":"0"},"ver":"190104c190915","dis":false,"a":{"function":"not equal","value":"","new true":"","new false":"-"},"ev":{}},"If#3":{"t":"If","lX":1100,"lY":1276,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"50%","height":"50%","x":"0","y":"0"},"ver":"190104c190915","dis":false,"a":{"function":"not equal","value":"","new true":"","new false":"Not Available"},"ev":{}},"Label#0":{"t":"Label","lX":692,"lY":1324,"sX":2.04,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"50%","height":"50%","x":"0","y":"0"},"ver":"190104c190915","dis":false,"a":{"font size":"14","text align":"left","label text":"<b>Check if reason is not an empty string</b>"},"ev":{}},"Previous Value#0":{"t":"PreviousValue","lX":795,"lY":1550,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"default value":"0"},"ev":{}},"End#2":{"t":"End","lX":1310,"lY":1515,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"SMTPCLIENT/SMTPCLIENT/SMTP/SEND","OR Create New Channel":"","category":"SMTPCLIENT","class":"SMTPCLIENT","instance":"SMTP","For Selected / New Channel":"","scope":"SEND","all instances":"false","[object Attr]":"SEND"},"ev":{}},"ifPrevious":{"t":"If","lX":1025,"lY":1550,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"function":"equal","value":"1","new true":"2","new false":""},"ev":{}},"Start#1":{"t":"Start","lX":180,"lY":1590,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/ACTIVATED","all instances":"true","category":"KG","class":"BRISBANE","instance":"+","scope":"ACTIVATED"},"ev":{}},"Label#1":{"t":"Label","lX":715,"lY":1665,"sX":5,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"4.22%","height":"8.04%","x":"49.05%","y":"129.5%"},"ver":"190104c190915","dis":false,"a":{"font size":"14","text align":"left","label text":"<b>Previous channel value needs to read off the ACTIVATED channel not the ALL channel (previous would be the JSON string from yabbie</b>"},"ev":{}},"IfPrevValue":{"t":"If","lX":545,"lY":1555,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"function":"equal","value":"2","new true":"2","new false":""},"ev":{}},"Container#0":{"t":"Container","lX":440,"lY":55,"sX":10.04,"sY":3.2,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Triggered"},"ev":{}},"Container#1":{"t":"Container","lX":436,"lY":364,"sX":10.04,"sY":1.32,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"58.07%","height":"14.93%","x":"0","y":"0"},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Date / Time / Pulse"},"ev":{}},"Container#2":{"t":"Container","lX":435,"lY":485,"sX":10.04,"sY":2.48,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Location / Coordinates"},"ev":{}},"Container#3":{"t":"Container","lX":436,"lY":720,"sX":10.04,"sY":3.76,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"58.07%","height":"42.53%","x":"0","y":"0"},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Sensors"},"ev":{}},"Container#4":{"t":"Container","lX":435,"lY":1085,"sX":10.04,"sY":3.16,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Reverse Geo-Lookup (Google)"},"ev":{}},"Container#5":{"t":"Container","lX":25,"lY":60,"sX":4.2,"sY":13.35,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"blue","title":"Raw Sensor Data (Yabby)"},"ev":{}},"Container#6":{"t":"Container","lX":435,"lY":1390,"sX":10.04,"sY":3.45,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"green","title":"Email (On Triggered)"},"ev":{}},"Container#7":{"t":"Container","lX":25,"lY":1385,"sX":4.2,"sY":3.48,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"17.73%","height":"27.73%","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"false","color":"blue","title":"Email"},"ev":{}},"Container#8":{"t":"Container","lX":25,"lY":5,"sX":14.16,"sY":0.6,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"","height":"","x":"","y":""},"ver":"190104c190915","z":"100","dis":false,"a":{"3D shadow":"true","color":"red","title":"Kinect Group Traps"},"ev":{}},"HttpRest#0":{"t":"HttpRest","lX":75,"lY":585,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"domain":"Any","path":"Sensahub/kinectgroup/trapstrial/+/All","method":"post","section0":"","data location":"query string","Format":"query string","data key name":"data","section1":"","Token Key":"token","Token Value":"D87Z8RTGutyvQPMxJHrR0ASAEo8BMk="},"ev":{}},"Notes#0":{"t":"Notes","lX":1435,"lY":60,"sX":2.75,"sY":3.1,"s":"Traps","ps":{"enabled":false,"scalingType":"OK","width":"15.91%","height":"35.07%","x":"83%","y":"6.67%"},"ver":"190104c190915","z":"110","dis":false,"a":{"color":"orange","3D shadow":"false","title":"Activated","notes":"A trap can only be set as triggered (value 2) IFF the trap has been set (value 1). A sensor input is the only way  to trigger the sensor. All other channel values are set by the client."},"ev":{}},"End#3":{"t":"End","lX":1275,"lY":135,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"4.22%","height":"5.23%","x":"53.48%","y":"12.06%"},"ver":"200107c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/SETTIME","[object Attr]":"SETTIME","category":"KG","class":"BRISBANE","instance":"+","scope":"SETTIME"},"ev":{}},"JsonParser#0":{"t":"JsonParser","lX":515,"lY":95,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"field name":"TriggeredTime"},"ev":{}},"Start#0":{"t":"Start","lX":190,"lY":1485,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"4.22%","height":"5.23%","x":"7.68%","y":"116.88%"},"ver":"200107c190915","dis":false,"a":{"channel":"KG/BRISBANE/+/SETTIME","[object Attr]":"SETTIME","category":"KG","class":"BRISBANE","instance":"+","scope":"SETTIME"},"ev":{}},"Scripting#0":{"t":"Scripting","lX":535,"lY":1410,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"code editor":"// Javascript flow scripting.\n/**\n * Description: \n * Create Author/Date: \n * Modified Author/Date Date: \n * Version: \n */\n\n// Declare global variables here to be initialised at server startup\n\n/**\n * Initialise script state (run once at startup). Pass in channels set in script node widget\n */\nScript.on(\"load\", function() {\n    try {\n    } catch (err) {\n        Script.System(\"log\", \"An error occurred in user script load function - \" + err);\t// Or add own error management\n    }\n});\n\n/**\n * Response to incoming flow message. eventData object passed in with:\n * eventData.input - current state of input link (string)\n * eventData.ch0 - current state of channel0. (Object. Members {channel}, {date}, {value})\n * eventData.ch1 - current state of channel1. (Object. Members {channel}, {date}, {value})\n * eventData.inputCh - current state of channel being processed and the channel details (Object. Members {channel}, {value})\n * eventData.matchingCh - all channels that have any match to part of the processed channel (Object. Members {channel}, {value})\n * @return {string} return a value to continue the flow or to cancel flow return null\n */\nScript.on(\"flow\", function(eventData) {\n    var trap = JSON.parse(eventData.inputCh).channel.instance;\n    var value = System.getChannelValue(\"SENSAHUB/KG/BRISBANE/\" + trap + \"/ACTIVATED\");\n    return value;\n});"},"ev":{}},"If#0":{"t":"If","lX":795,"lY":1430,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"4.22%","height":"8.04%","x":"32.42%","y":"113.59%"},"ver":"190104c190915","dis":false,"a":{"function":"equal","value":"2","new true":"","new false":""},"ev":{}},"If#4":{"t":"If","lX":895,"lY":100,"sX":1,"sY":1,"s":"Traps","ps":{"enabled":false,"scalingType":"NOSCALE","width":"","height":"","x":"","y":""},"ver":"190104c190915","dis":false,"a":{"function":"not equal","value":"-1","new true":"","new false":""},"ev":{}}},"screens":{"Traps":{"index":0,"icon":"swap_calls","meta":""},"Rodent Sandpit":{"index":1,"icon":"swap_calls","meta":""},"Fridge Sandpit":{"index":2,"icon":"swap_calls","meta":""},"Traps v2":{"index":3,"icon":"swap_calls","tt":null,"meta":""}},"meta":"","links":[{"inpNodeName":"triggered","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 430.4514664071594 625.320987654321 430.4514664071594 277.07418856259653 520.1004636785162 277.07418856259653","screen":"Traps"},{"inpNodeName":"JSON Parser#0","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 434.6894880454902 625.320987654321 434.6894880454902 421.0123647604328 528.5765069551778 421.0123647604328","screen":"Traps"},{"inpNodeName":"JSON Parser#1","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 437.90123456790127 625.320987654321 437.90123456790127 556 535 556","screen":"Traps"},{"inpNodeName":"JSON Parser#2","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 437.90123456790127 625.320987654321 437.90123456790127 661 535 661","screen":"Traps"},{"inpNodeName":"JSON Parser#3","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 437.90123456790127 625.320987654321 437.90123456790127 791 535 791","screen":"Traps"},{"inpNodeName":"JSON Parser#4","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 437.90123456790127 625.320987654321 437.90123456790127 906 535 906","screen":"Traps"},{"inpNodeName":"JSON Parser#5","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.8024691358025 624.320987654321 C 437.83786517068336 625.320987654321 437.83786517068336 1019 534.8732612055642 1019","screen":"Traps"},{"inpNodeName":"JSON Parser#6","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 340.0740740740741 623.8641975308642 C 437.85185185185185 624.8641975308642 437.85185185185185 1247.061728395062 535.6296296296297 1247.061728395062","screen":"Traps"},{"inpNodeName":"If#1","inpNodeType":"If","inpPin":0,"outNodeName":"JSON Parser#6","outNodeType":"JsonParser","outPin":0,"path":"M 626.0987654320987 1247.061728395062 C 650.5617283950617 1247.061728395062 650.5617283950617 1246.0123456790122 676.0246913580246 1248.0123456790122","screen":"Traps"},{"inpNodeName":"HTTP Request#0","inpNodeType":"HttpRequest","inpPin":0,"outNodeName":"If#1","outNodeType":"If","outPin":0,"path":"M 746.9629629629629 1226.0123456790122 C 779.8641975308642 1226.0123456790122 779.8641975308642 1251.1481481481483 814.7654320987656 1251.1481481481483","screen":"Traps"},{"inpNodeName":"Street","inpNodeType":"Scripting","inpPin":0,"outNodeName":"HTTP Request#0","outNodeType":"HttpRequest","outPin":0,"path":"M 906 1251 C 933.4180834621329 1251 933.4180834621329 1183 962.8361669242659 1183","screen":"Traps"},{"inpNodeName":"If#2","inpNodeType":"If","inpPin":0,"outNodeName":"Street","outNodeType":"Scripting","outPin":0,"path":"M 1054 1183 C 1076.5 1183 1076.5 1182 1101 1183","screen":"Traps"},{"inpNodeName":"End#5","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#0","outNodeType":"JsonParser","outPin":0,"path":"M 619 421 C 945.5 421 945.5 425 1270 427","screen":"Traps"},{"inpNodeName":"End#6","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#1","outNodeType":"JsonPareser","outPin":0,"path":"M 624 556 C 946 555 946 559 1269 561","screen":"Traps"},{"inpNodeName":"End#7","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#2","outNodeType":"JsonParser","outPin":0,"path":"M 624 661 C 946 659 946 664 1269 665","screen":"Traps"},{"inpNodeName":"End#9","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#3","outNodeType":"JsonPareser","outPin":0,"path":"M 624 791 C 953.5 791 953.5 792 1285 793","screen":"Traps"},{"inpNodeName":"End#8","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#4","outNodeType":"JsonParser","outPin":0,"path":"M 624 906 C 955 907 955 904 1285 905","screen":"Traps"},{"inpNodeName":"End#10","inpNodeType":"End","inpPin":0,"outNodeName":"JSON Parser#5","outNodeType":"JsonParser","outPin":0,"path":"M 626 1019 C 953.5 1019 953.5 1020 1281 1021","screen":"Traps"},{"inpNodeName":"End#0","inpNodeType":"End","inpPin":0,"outNodeName":"If#2","outNodeType":"If","outPin":0,"path":"M 1169 1161 C 1238.5 1161 1238.5 1174 1310 1172","screen":"Traps"},{"inpNodeName":"End#0","inpNodeType":"End","inpPin":0,"outNodeName":"If#2","outNodeType":"If","outPin":1,"path":"M 1169 1203 C 1238.5 1203 1238.5 1174 1310 1172","screen":"Traps"},{"inpNodeName":"End#1","inpNodeType":"End","inpPin":0,"outNodeName":"If#3","outNodeType":"If","outPin":0,"path":"M 1173 1301 C 1240 1301 1240 1325 1309 1325","screen":"Traps"},{"inpNodeName":"End#1","inpNodeType":"End","inpPin":0,"outNodeName":"If#3","outNodeType":"If","outPin":1,"path":"M 1173 1343 C 1240 1343 1240 1325 1309 1325","screen":"Traps"},{"inpNodeName":"If#3","inpNodeType":"If","inpPin":0,"outNodeName":"Suburb","outNodeType":"Scripting","outPin":0,"path":"M 1054 1323 C 1078.5 1323 1078.5 1323 1105 1323","screen":"Traps"},{"inpNodeName":"End#2","inpNodeType":"End","inpPin":0,"outNodeName":"email","outNodeType":"Scripting","outPin":0,"path":"M 1259 1533 C 1286 1531 1286 1532 1315 1532","screen":"Traps"},{"inpNodeName":"email","inpNodeType":"Scripting","inpPin":0,"outNodeName":"ifPrevious","outNodeType":"If","outPin":0,"path":"M 1098 1575 C 1133 1575 1133 1531 1170 1533","screen":"Traps"},{"inpNodeName":"Suburb","inpNodeType":"Scripting","inpPin":0,"outNodeName":"HTTP Request#0","outNodeType":"HttpRequest","outPin":0,"path":"M 906 1251 C 933 1251 933 1323 965 1323","screen":"Traps"},{"inpNodeName":"All","inpNodeType":"Scripting","inpPin":0,"outNodeName":"HttpRest#0","outNodeType":"HttpRest","outPin":0,"path":"M 169 612 C 209.5 612 209.5 624 250 623","screen":"Traps"},{"inpNodeName":"JsonParser#0","inpNodeType":"JsonParser","inpPin":0,"outNodeName":"All","outNodeType":"Scripting","outPin":0,"path":"M 339 623 C 429.5 624 429.5 146 520 146","screen":"Traps"},{"inpNodeName":"If#0","inpNodeType":"If","inpPin":0,"outNodeName":"Scripting#0","outNodeType":"Scripting","outPin":0,"path":"M 629 1453 C 714.5 1453 714.5 1475 800 1477","screen":"Traps"},{"inpNodeName":"email","inpNodeType":"Scripting","inpPin":0,"outNodeName":"If#0","outNodeType":"If","outPin":0,"path":"M 868 1455 C 1019 1453 1019 1533 1170 1533","screen":"Traps"},{"inpNodeName":"Previous Value#0","inpNodeType":"PreviousValue","inpPin":0,"outNodeName":"IfPrevValue","outNodeType":"If","outPin":0,"path":"M 618 1580 C 710 1580 710 1601 800 1601","screen":"Traps"},{"inpNodeName":"IfPrevValue","inpNodeType":"If","inpPin":0,"outNodeName":"Start#1","outNodeType":"Start","outPin":0,"path":"M 274 1607 C 411 1606 411 1602 550 1602","screen":"Traps"},{"inpNodeName":"ifPrevious","inpNodeType":"If","inpPin":0,"outNodeName":"Previous Value#0","outNodeType":"PreviousValue","outPin":0,"path":"M 889 1601 C 959.5 1601 959.5 1595 1030 1597","screen":"Traps"},{"inpNodeName":"If#4","inpNodeType":"If","inpPin":0,"outNodeName":"JsonParser#0","outNodeType":"JsonParser","outPin":0,"path":"M 609 146 C 754.5 146 754.5 146 900 147","screen":"Traps"},{"inpNodeName":"End#3","inpNodeType":"End","inpPin":0,"outNodeName":"If#4","outNodeType":"If","outPin":0,"path":"M 968 125 C 1124 124 1124 152 1280 152","screen":"Traps"},{"inpNodeName":"End#4","inpNodeType":"End","inpPin":0,"outNodeName":"triggered","outNodeType":"JsonParser","outPin":0,"path":"M 614 276 C 930.5 276 930.5 274 1280 267","screen":"Traps"}]}